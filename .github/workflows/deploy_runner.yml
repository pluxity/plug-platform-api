name: Deploy to Stage with Sasang (from project/sasang/main) # 워크플로우 이름도 명확하게

on:
  push:
    branches:
      - project/sasang/main # project/sasang/main 브랜치에 푸시될 때 실행

jobs:
  build_and_deploy:
    runs-on: self-hosted # GitHub Actions Runner가 설치된 서버에서 실행

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Docker Hub 또는 다른 레지스트리 로그인 (필요시)
      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Define Docker image name and tar file name
        id: docker_info
        run: |
          IMAGE_NAME="plug-platform-api" # 이미지 이름은 그대로 사용
          TAR_FILE_NAME="${IMAGE_NAME}.tar"
          # deploy.sh 스크립트가 위치할 것으로 예상되는 경로이자, tar 파일을 생성할 경로
          # 이 경로는 deploy.sh 스크립트의 working-directory와 일치해야 함
          # 또한, deploy.sh 스크립트 내부에서 이 tar 파일을 참조할 수 있어야 함
          DEPLOY_BASE_PATH="/home/pluxity/docker/busan_sasang" # deploy.sh가 있는 서버 경로
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "TAR_FILE_NAME=${TAR_FILE_NAME}" >> $GITHUB_OUTPUT
          echo "TAR_FILE_PATH=${DEPLOY_BASE_PATH}/${TAR_FILE_NAME}" >> $GITHUB_OUTPUT
          echo "DEPLOY_BASE_PATH=${DEPLOY_BASE_PATH}" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          echo "Building Docker image: ${{ steps.docker_info.outputs.IMAGE_NAME }}"
          # Dockerfile 경로를 'sasang/Dockerfile'로 변경
          # 빌드 컨텍스트는 저장소 루트(.)
          docker build -f sasang/Dockerfile -t ${{ steps.docker_info.outputs.IMAGE_NAME }}:latest .
          # 특정 버전 태그를 사용하려면 :latest 대신 다른 태그 사용 가능 (예: :${{ github.sha }})

      - name: Save Docker image to a .tar file
        run: |
          echo "Saving Docker image ${{ steps.docker_info.outputs.IMAGE_NAME }}:latest to ${{ steps.docker_info.outputs.TAR_FILE_PATH }}"
          # tar 파일을 생성할 디렉토리가 없다면 생성
          mkdir -p ${{ steps.docker_info.outputs.DEPLOY_BASE_PATH }}
          docker save -o ${{ steps.docker_info.outputs.TAR_FILE_PATH }} ${{ steps.docker_info.outputs.IMAGE_NAME }}:latest
          echo "Docker image saved to ${{ steps.docker_info.outputs.TAR_FILE_PATH }}"

      - name: Execute deployment script on server
        # deploy.sh 스크립트가 있는 디렉토리로 설정
        # 이 디렉토리는 이전 단계에서 TAR_FILE_PATH의 디렉토리 부분과 일치해야 함
        working-directory: ${{ steps.docker_info.outputs.DEPLOY_BASE_PATH }}
        env:
          # deploy.sh 스크립트가 환경 변수로 tar 파일 경로를 참조할 수 있도록 전달
          # 스크립트 내부에서 이 환경 변수를 사용하거나, 고정된 파일 이름(예: plug-platform-api.tar)을 사용
          DEPLOY_TAR_FILE: ${{ steps.docker_info.outputs.TAR_FILE_NAME }} # 스크립트에서 TAR_FILE_NAME만 알아도 됨 (같은 디렉토리 가정)
          SUDO_PASSWORD: ${{ secrets.SUDO_PASSWORD }} # GitHub Secrets에 SUDO_PASSWORD 등록 필요
        run: |
          echo "Current directory for deployment script: $(pwd)"
          echo "Deployment script to execute: ./deploy.sh"
          echo "Tar file name passed as env var DEPLOY_TAR_FILE: $DEPLOY_TAR_FILE"
          echo "Expected tar file at: $(pwd)/$DEPLOY_TAR_FILE" # 스크립트가 참조할 실제 파일 경로

          if [ -f "./deploy.sh" ]; then
            if [ -f "./${DEPLOY_TAR_FILE}" ]; then # 스크립트와 같은 위치에 tar 파일이 있는지 확인
              echo "Found deploy.sh and tar file. Executing with 'sudo bash ./deploy.sh'..."
              # deploy.sh 스크립트가 DEPLOY_TAR_FILE 환경 변수를 사용하거나,
              # './plug-platform-api.tar' 와 같이 현재 디렉토리 기준으로 tar 파일을 참조하도록 작성되어야 함
              echo "$SUDO_PASSWORD" | sudo -S bash ./deploy.sh
            else
              echo "Error: Tar file $(pwd)/${DEPLOY_TAR_FILE} not found!"
              exit 1
            fi
          else
            echo "Error: deploy.sh not found in $(pwd)"
            exit 1
          fi

          echo "Deployment script execution finished."
