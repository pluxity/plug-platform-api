# @name 회원가입
POST {{domain}}{{context-path}}/auth/sign-up
Content-Type: application/json

{
  "username": "testuser",
  "password": "password123",
  "name": "테스트사용자",
  "code": "TEST001"
}

### 응답에서 사용자 ID 확인
# @name 로그인
# @no-cookie-jar
POST {{domain}}{{context-path}}/auth/sign-in
Content-Type: application/json

{
  "username": "testuser",
  "password": "password123"
}

> {%
    client.test("로그인 성공", function() {
        client.assert(response.status === 200, "응답 상태가 200이어야 합니다");
        client.assert(response.body.data.accessToken, "액세스 토큰이 있어야 합니다");
        client.assert(response.body.data.name, "사용자 이름이 있어야 합니다");
        client.assert(response.body.data.code, "사용자 코드가 있어야 합니다");
    });
    
    // 쿠키에서 리프레시 토큰 추출
    var cookies = response.headers.valuesOf("Set-Cookie");
    var refreshTokenCookie = cookies.find(cookie => cookie.startsWith("RefreshToken="));
    
    if (refreshTokenCookie) {
        var refreshToken = refreshTokenCookie.split(";")[0].split("=")[1];
        client.global.set("refresh_token", refreshToken);
        client.log("리프레시 토큰이 저장되었습니다: " + refreshToken);
    }

    // 액세스 토큰 저장
    if (response.body.data.accessToken) {
        client.global.set("access_token", response.body.data.accessToken);
        client.log("액세스 토큰이 저장되었습니다: " + response.body.data.accessToken);
    }

    client.log("access_token", response.body.data.accessToken);
    client.log(client.global.get("access_token"));

%}

### 액세스 토큰으로 보호된 리소스 접근 예시
# 참고: 이 요청은 로그인 후에 실행해야 합니다. 로그인 요청이 성공하면 access_token 변수가 자동으로 설정됩니다.
GET {{domain}}{{context-path}}/users/me
Authorization: Bearer {{access_token}}

### 토큰 갱신
POST {{domain}}{{context-path}}/auth/refresh-token
Content-Type: application/json
Authorization: Bearer {{refresh_token}}

> {%
    client.test("토큰 갱신 성공", function() {
        client.assert(response.status === 200, "응답 상태가 200이어야 합니다");
        client.assert(response.body.data.accessToken, "새 액세스 토큰이 있어야 합니다");
    });
    
    // 새 액세스 토큰 저장
    if (response.body.data.accessToken) {
        client.global.set("access_token", response.body.data.accessToken);
        client.log("새 액세스 토큰이 저장되었습니다: " + response.body.data.accessToken);
    }
    
    // 쿠키에서 새 리프레시 토큰 추출
    var cookies = response.headers.valuesOf("Set-Cookie");
    var refreshTokenCookie = cookies.find(cookie => cookie.startsWith("RefreshToken="));
    
    if (refreshTokenCookie) {
        var refreshToken = refreshTokenCookie.split(";")[0].split("=")[1];
        client.global.set("refresh_token", refreshToken);
        client.log("새 리프레시 토큰이 저장되었습니다: " + refreshToken);
    }
%}

### 로그아웃
POST {{domain}}{{context-path}}/auth/sign-out
Content-Type: application/json
Authorization: Bearer {{refresh_token}}

> {%
    client.test("로그아웃 성공", function() {
        client.assert(response.status === 200, "응답 상태가 200이어야 합니다");
    });
    
    // 토큰 초기화
    client.global.set("access_token", "");
    client.global.set("refresh_token", "");
    client.log("토큰이 초기화되었습니다");
%}

### 잘못된 인증 정보로 로그인 시도
POST {{domain}}{{context-path}}/auth/sign-in
Content-Type: application/json

{
  "username": "testuser",
  "password": "wrongpassword"
}

> {%
    client.test("잘못된 인증 정보로 로그인 실패", function() {
        client.assert(response.status === 401 || response.status === 400, "응답 상태가 401 또는 400이어야 합니다");
    });
%}

### 존재하지 않는 사용자로 로그인 시도
POST {{domain}}{{context-path}}/auth/sign-in
Content-Type: application/json

{
  "username": "nonexistentuser",
  "password": "password123"
}

> {%
    client.test("존재하지 않는 사용자로 로그인 실패", function() {
        client.assert(response.status === 401 || response.status === 404, "응답 상태가 401 또는 404여야 합니다");
    });
%}

### 유효하지 않은 리프레시 토큰으로 토큰 갱신 시도
POST {{domain}}{{context-path}}/auth/refresh-token
Content-Type: application/json
Authorization: Bearer invalid_refresh_token

> {%
    client.test("유효하지 않은 리프레시 토큰으로 갱신 실패", function() {
        client.assert(response.status === 401 || response.status === 400, "응답 상태가 401 또는 400이어야 합니다");
    });
%} 