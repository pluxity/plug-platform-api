### 환경 변수 설정
@baseUrl = http://localhost:8080
@token = 

### 사용자 로그인
# @name login
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "username": "admin",
  "password": "admin123"
}

### 로그인 응답에서 토큰 저장
{% 
    if (login.response.body.data && login.response.body.data.token) {
        client.global.set("token", login.response.body.data.token);
    }
%}

### 사용자 등록
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "username": "testuser",
  "password": "password123",
  "email": "testuser@example.com",
  "name": "테스트 사용자"
}

### 현재 사용자 정보 조회
GET {{baseUrl}}/users/me
Authorization: Bearer {{token}}

### 현재 사용자의 역할 조회
GET {{baseUrl}}/users/me/roles
Authorization: Bearer {{token}}

### 모든 사용자 조회 (관리자 권한 필요)
GET {{baseUrl}}/admin/users
Authorization: Bearer {{token}}

### 특정 사용자 조회
GET {{baseUrl}}/users/1
Authorization: Bearer {{token}}

### 특정 사용자의 역할 조회
GET {{baseUrl}}/admin/users/2/roles
Authorization: Bearer {{token}}

### 사용자에게 역할 할당
POST {{baseUrl}}/admin/users/2/roles
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "roleId": 2
}

### 사용자의 역할 제거
DELETE {{baseUrl}}/admin/users/2/roles/2
Authorization: Bearer {{token}}

### 사용자 정보 수정
PUT {{baseUrl}}/users/1
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "수정된 이름",
  "email": "updated@example.com"
}

### 사용자 비밀번호 변경
PUT {{baseUrl}}/users/password
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "currentPassword": "password123",
  "newPassword": "newPassword123"
}

### 사용자 삭제 (관리자 권한 필요)
DELETE {{baseUrl}}/admin/users/2
Authorization: Bearer {{token}} 