plugins {
    id("java")
    id("org.springframework.boot") version "3.4.1"
    id("io.spring.dependency-management") version "1.1.7"
    id("com.diffplug.spotless") version "6.21.0"
    id("org.asciidoctor.jvm.convert") version "3.3.2"
    id("com.epages.restdocs-api-spec") version "0.18.2"
}

bootJar { enabled = false }

allprojects {
    tasks.withType(JavaExec) {
        jvmArgs += ['--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED', '--add-opens', 'java.base/java.io=ALL-UNNAMED']
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'org.asciidoctor.jvm.convert'
    apply plugin: 'com.epages.restdocs-api-spec'

    group = 'com.pluxity'
    version = '1.0.0'

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    ext {
        snippetsDir = file("build/generated-snippets")
        swaggerUiDir = rootProject.file("project-a/src/main/resources/static/swagger-ui")
    }

    dependencies {
        // Spring Boot
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

        // Database
        runtimeOnly 'com.h2database:h2'
        runtimeOnly 'com.mysql:mysql-connector-j'

        // Lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.projectlombok:lombok'

        // Test
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.mockito:mockito-core'
        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

        // Spring REST Docs
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
        testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.18.2'
        testImplementation 'com.epages:restdocs-api-spec:0.18.2'
    }

    test {
        useJUnitPlatform()
        outputs.dir snippetsDir
        systemProperty 'org.springframework.restdocs.outputDir', snippetsDir
    }

    task generateApiDocs(dependsOn: test) {
        doLast {
            def templateFile = rootProject.file('core/src/main/resources/templates/api-docs-template.adoc')
            def targetDir = file('src/docs/asciidoc')
            def moduleName = project.name.capitalize()

            if (!targetDir.exists()) {
                targetDir.mkdirs()
            }

            def apiDocs = new StringBuilder()
            def snippetsPath = snippetsDir.absolutePath
            def snippetsDir = new File(snippetsPath)

            if (snippetsDir.exists()) {
                snippetsDir.eachDir { dir ->
                    def endpoint = dir.name
                    apiDocs.append("\n[[${endpoint}]]\n")
                    apiDocs.append("== ${endpoint.capitalize()} API\n\n")

                    if (new File(dir, 'http-request.adoc').exists()) {
                        apiDocs.append("=== Request Example\n")
                        apiDocs.append("include::{snippets}/${endpoint}/http-request.adoc[]\n\n")
                    }

                    if (new File(dir, 'http-response.adoc').exists()) {
                        apiDocs.append("=== Response Example\n")
                        apiDocs.append("include::{snippets}/${endpoint}/http-response.adoc[]\n\n")
                    }

                    if (new File(dir, 'response-fields.adoc').exists()) {
                        apiDocs.append("=== Response Fields\n")
                        apiDocs.append("include::{snippets}/${endpoint}/response-fields.adoc[]\n\n")
                    }
                }
            }

            def template = templateFile.text
            def content = template
                    .replace('${moduleName}', moduleName)
                    .replace('${generatedApiDocs}', apiDocs.toString())

            new File(targetDir, 'api-docs.adoc').text = content
        }
    }

    openapi3 {
        server = 'http://localhost:8080'
        title = "${project.name.capitalize()} API"
        description = "${project.name.capitalize()} REST API Documentation"
        version = '1.0.0'
        format = 'yaml'
    }

    tasks.register('copyOasToSwaggerUi', Copy) {
        dependsOn tasks.named('openapi3')
        from layout.buildDirectory.file("api-spec/openapi3.yaml")
        into swaggerUiDir
        rename { "${project.name}-api.yaml" }
    }

    asciidoctor {
        inputs.dir snippetsDir
        sourceDir = file('src/docs/asciidoc')
        outputDir = file('build/docs/asciidoc')
        options doctype: 'book', backend: 'html5'
        attributes = [
                snippets: snippetsDir,
                'source-highlighter': 'highlight.js',
                'toc': 'left',
                'toclevels': '2',
                'sectlinks': ''
        ]

        onlyIf {
            snippetsDir.exists()
        }

        dependsOn generateApiDocs
        finalizedBy tasks.named('copyOasToSwaggerUi')
    }

    bootJar {
        enabled = false
    }

    jar { enabled = true }
}

task updateSwaggerInitializer {
    doLast {
        def swaggerUiDir = file("project-a/src/main/resources/static/swagger-ui")
        def apiSpecs = []
        
        swaggerUiDir.listFiles().each { file ->
            if (file.name.endsWith('-api.yaml')) {
                def moduleName = file.name.replace('-api.yaml', '')
                apiSpecs << [
                    name: "${moduleName.capitalize()} API",
                    url: "/swagger-ui/${file.name}"
                ]
            }
        }

        def initializerContent = """window.onload = function() {
          window.ui = SwaggerUIBundle({
            urls: ${groovy.json.JsonOutput.toJson(apiSpecs)},
            dom_id: '#swagger-ui',
            deepLinking: true,
            presets: [
              SwaggerUIBundle.presets.apis,
              SwaggerUIStandalonePreset
            ],
            plugins: [
              SwaggerUIBundle.plugins.DownloadUrl
            ],
            layout: "StandaloneLayout",
            defaultModelsExpandDepth: -1,
            displayRequestDuration: true,
            filter: true
          });
        };
        """
        new File(swaggerUiDir, 'swagger-initializer.js').text = initializerContent
    }
}

project(':core').subprojects {
    tasks.named('copyOasToSwaggerUi').configure {
        finalizedBy rootProject.tasks.named('updateSwaggerInitializer')
    }
}