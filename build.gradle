plugins {
    id("java")
    id("org.springframework.boot") version "3.4.1"
    id("io.spring.dependency-management") version "1.1.7"
    id("com.diffplug.spotless") version "6.21.0"
    id("org.asciidoctor.jvm.convert") version "3.3.2"
    id("com.epages.restdocs-api-spec") version "0.18.2"
}

bootJar { enabled = false }
subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'org.asciidoctor.jvm.convert'
    apply plugin: 'com.epages.restdocs-api-spec'

    group = 'com.pluxity'
    version = '1.0.0'

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    ext {
        snippetsDir = file("build/generated-snippets")
        swaggerUiDir = rootProject.file("project-a/src/main/resources/static/swagger-ui")
    }

    dependencies {
        // Spring Boot
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

        // Database
        runtimeOnly 'com.h2database:h2'
        runtimeOnly 'com.mysql:mysql-connector-j'

        // Lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.projectlombok:lombok'

        // Test
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.mockito:mockito-core'
        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

        // Spring REST Docs
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
        testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.18.2'
        testImplementation 'com.epages:restdocs-api-spec:0.18.2'
    }

    test {
        useJUnitPlatform()
        outputs.dir snippetsDir
        systemProperty 'org.springframework.restdocs.outputDir', snippetsDir
    }

    task generateApiDocs(dependsOn: test) {
        doLast {
            def templateFile = rootProject.file('core/src/main/resources/templates/api-docs-template.adoc')
            def targetDir = file('src/docs/asciidoc')
            def moduleName = project.name.capitalize()

            if (!targetDir.exists()) {
                targetDir.mkdirs()
            }

            def apiDocs = new StringBuilder()
            def snippetsPath = snippetsDir.absolutePath
            def snippetsDir = new File(snippetsPath)

            if (snippetsDir.exists()) {
                snippetsDir.eachDir { dir ->
                    def endpoint = dir.name
                    apiDocs.append("\n[[${endpoint}]]\n")
                    apiDocs.append("== ${endpoint.capitalize()} API\n\n")

                    if (new File(dir, 'http-request.adoc').exists()) {
                        apiDocs.append("=== Request Example\n")
                        apiDocs.append("include::{snippets}/${endpoint}/http-request.adoc[]\n\n")
                    }

                    if (new File(dir, 'http-response.adoc').exists()) {
                        apiDocs.append("=== Response Example\n")
                        apiDocs.append("include::{snippets}/${endpoint}/http-response.adoc[]\n\n")
                    }

                    if (new File(dir, 'response-fields.adoc').exists()) {
                        apiDocs.append("=== Response Fields\n")
                        apiDocs.append("include::{snippets}/${endpoint}/response-fields.adoc[]\n\n")
                    }
                }
            }

            def template = templateFile.text
            def content = template
                    .replace('${moduleName}', moduleName)
                    .replace('${generatedApiDocs}', apiDocs.toString())

            new File(targetDir, 'api-docs.adoc').text = content
        }
    }

    asciidoctor {
        inputs.dir snippetsDir
        sourceDir = file('src/docs/asciidoc')
        outputDir = file('build/docs/asciidoc')
        options doctype: 'book', backend: 'html5'
        attributes = [
                snippets            : snippetsDir,
                'source-highlighter': 'highlight.js',
                'toc'               : 'left',
                'toclevels'         : '2',
                'sectlinks'         : ''
        ]

        onlyIf {
            snippetsDir.exists()
        }

        dependsOn generateApiDocs
    }

    bootJar {
        enabled = false
    }

    jar { enabled = true }
}

task generateAllDocs {
    group = 'documentation'
    description = 'Generates and aggregates API documentation for all projects'

    // Core 프로젝트와 Non-core 프로젝트의 asciidoctor 태스크에 대한 의존성 추가
    allprojects { project ->
        def asciidoctorTask = project.tasks.findByName('asciidoctor')
        if (asciidoctorTask) {
            dependsOn asciidoctorTask
        }
    }

    doLast {
        // Non-core 프로젝트들의 문서 디렉토리 생성 및 의존성 문서 복사
        subprojects.findAll { !it.path.startsWith(':core') }.each { project ->
            def docsDir = project.file("build/resources/main/static/docs")
            docsDir.mkdirs()

            // 프로젝트의 의존성 중 core 모듈 찾기
            project.configurations.implementation.dependencies
                    .findAll { it instanceof ProjectDependency }
                    .each { dependency ->
                        def depProject = dependency.dependencyProject
                        if (depProject.path.startsWith(':core')) {
                            def sourceDocsDir = depProject.file("build/docs/asciidoc")
                            if (sourceDocsDir.exists()) {
                                copy {
                                    from sourceDocsDir
                                    into "${docsDir}/${depProject.name}"
                                }
                            }
                        }
                    }

            // 프로젝트 자체의 API 문서 복사
            def projectDocsDir = project.file("build/docs/asciidoc")
            if (projectDocsDir.exists()) {
                copy {
                    from projectDocsDir
                    into "${docsDir}/${project.name}"
                }
            }

            // 인덱스 페이지 생성
            def indexContent = """
                <!DOCTYPE html>
                <html>
                <head>
                    <title>API Documentation</title>
                    <style>
                        body { font-family: Arial, sans-serif; margin: 20px; }
                        .nav-item { margin: 10px 0; }
                        a { color: #007bff; text-decoration: none; }
                        a:hover { text-decoration: underline; }
                    </style>
                </head>
                <body>
                    <h1>API Documentation</h1>
                    <div class="nav-container">
                """
            // 프로젝트 자체의 API 문서 링크 추가
            if (projectDocsDir.exists()) {
                indexContent += """
                <div class="nav-item">
                    <a href="/docs/${project.name}/api-docs.html">${project.name.capitalize()} API Documentation</a>
                </div>"""
            }

            // 의존성 기반 문서 링크 추가
            project.configurations.implementation.dependencies
                    .findAll { it instanceof ProjectDependency }
                    .each { dependency ->
                        def depProject = dependency.dependencyProject
                        if (depProject.path.startsWith(':core')) {
                            indexContent += """
                            <div class="nav-item">
                                <a href="/docs/${depProject.name}/api-docs.html">${depProject.name.capitalize()} API Documentation</a>
                            </div>"""
                        }
                    }

            indexContent += """
            </div>
            </body>
            </html>
            """
            project.file("build/resources/main/static/docs/index.html").write(indexContent)
        }
    }
}

// Non-core 프로젝트들의 classes 태스크 이후에 문서 생성
subprojects.findAll { !it.path.startsWith(':core') }.each { project ->
    project.tasks.findByName('classes')?.finalizedBy(generateAllDocs)
}
