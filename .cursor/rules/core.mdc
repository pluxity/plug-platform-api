---
description: 
globs: 
alwaysApply: true
---
## 1. 시스템 요구사항 및 환경

- **지원 OS**: Windows 11
- **개발 환경**: Intellij, Cursor
- **언어 버전**: Java 21
- **프레임워크 버전**: Spring boot 3.4.1 + starter
- **빌드 도구**: gradle-8.11.1

## 2. 함수형 프로그래밍 (FP) 원칙

- **불변성 (Immutability)**: 가능한 불변 데이터 구조를 사용하세요.
- **순수 함수 (Pure Functions)**: 부작용이 없고 동일 입력에 항상 동일 출력을 반환하는 함수를 작성하세요.
- **함수 합성 (Function Composition)**: 작은 함수들을 조합하여 복잡한 로직을 구현하세요.
- **고차 함수 (Higher-Order Functions)**: map, filter, reduce 등 함수를 인자로 받거나 반환하는 패턴을 활용하세요.
- **재귀 최적화**: 깊은 재귀는 꼬리 재귀(tail recursion)로 최적화하세요.

## 3. SOLID 원칙

- **S (Single Responsibility)**: 클래스는 변경 이유가 하나만 있어야 합니다.
- **O (Open/Closed)**: 확장에는 열려있고, 수정에는 닫혀있어야 합니다.
- **L (Liskov Substitution)**: 자식 클래스는 부모 클래스를 대체할 수 있어야 합니다.
- **I (Interface Segregation)**: 클라이언트가 사용하지 않는 인터페이스에 의존하지 않아야 합니다.
- **D (Dependency Inversion)**: 구체적인 구현이 아닌 추상화에 의존해야 합니다.

## 4. 코드 스타일 및 포맷팅

- **일관된 들여쓰기**: 프로젝트 전체에서 일관된 들여쓰기 스타일을 사용하세요.
- **적절한 줄 길이**: 한 줄의 길이는 80-120자를 넘지 않도록 하세요.
- **의미 있는 명명**: 변수, 함수, 클래스 등의 이름은 그 목적을 명확히 드러내야 합니다.
- **주석**: 왜(why)에 초점을 맞춘 주석을 작성하고, 자명한 코드에는 주석을 달지 마세요.
- **일관된 대소문자 규칙**: camelCase, PascalCase, snake_case 등 일관된 규칙을 사용하세요.

## 5. 안티패턴 회피

- **전역 상태 최소화**: 전역 변수와 싱글톤 패턴의 과도한 사용을 피하세요.
- **깊은 중첩 피하기**: 조건문과 반복문의 깊은 중첩은 가독성을 저하시킵니다.
- **매직 넘버/문자열 금지**: 의미 있는 상수로 추상화하세요.
- **과도한 주석 피하기**: 주석으로 설명해야 할 복잡한 코드는 리팩토링하세요.
- **긴 함수 지양**: 함수는 한 화면에 표시될 수 있는 크기로 유지하세요.

## 6. 에러 처리

- **명확한 에러 메시지**: 발생 원인과 해결 방법이 포함된 명확한 에러 메시지를 제공하세요.
- **예외는 예외적인 상황에만**: 일반적인 흐름 제어에 예외를 사용하지 마세요.
- **빈 catch 블록 금지**: 예외를 잡았다면 적절히 처리하거나 로깅하세요.
- **조기 반환/실패**: 깊은 중첩 대신 조기 반환이나 실패를 사용하세요.

## 7. 테스트

- **테스트 우선 접근법**: 가능하면 TDD(Test-Driven Development) 방식을 적용하세요.
- **단위 테스트 범위**: 주요 비즈니스 로직은 반드시 단위 테스트로 검증하세요.
- **독립적인 테스트**: 각 테스트는 다른 테스트에 의존하지 않고 독립적으로 실행되어야 합니다.
- **테스트 가능한 설계**: 코드는 테스트하기 쉽게 설계되어야 합니다.

## 8. 성능 및 최적화

- **조기 최적화 경계**: "조기 최적화는 모든 악의 근원"이라는 원칙을 기억하세요.
- **실제 병목 최적화**: 성능 문제가 발생한 후 프로파일링을 통해 실제 병목을 찾아 최적화하세요.
- **알고리즘 효율성**: 적절한 자료구조와 알고리즘을 선택하세요.
- **메모리 관리**: 메모리 누수를 방지하고 가비지 컬렉션에 친화적인 코드를 작성하세요.

## 9. 일반 원칙

- **단일 책임 원칙 (SRP)**: 각 함수, 클래스, 모듈은 한 가지 일만 담당해야 합니다.
- **명확한 의도**: 코드는 그 의도가 명확히 드러나도록 작성하세요.
- **DRY (Don't Repeat Yourself)**: 중복 코드는 추상화하여 재사용하세요.
- **KISS (Keep It Simple, Stupid)**: 불필요하게 복잡한 해결책보다 간단한 해결책을 선호하세요.
- **YAGNI (You Aren't Gonna Need It)**: 필요하기 전에는 기능을 추가하지 마세요.